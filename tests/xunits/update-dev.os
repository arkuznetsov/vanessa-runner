// BSLLS-off
#Использовать asserts
#Использовать tempfiles
#Использовать gitrunner
#Использовать "utils"
#Использовать "../.."

#Область ОписаниеПеременных

Перем НакопленныеВременныеФайлы; // фиксация накопленных времнных файлов для сброса

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

&Тест
Процедура ТестДолжен_ОбновитьФайловуюБазуИзИсходниковIbcmd() Экспорт

	// Дано
	Исполнитель = Новый Тест_ИсполнительКоманд("update-dev");
	Исполнитель.УстановитьКонтекстПустаяИБ();
	КаталогSrc = Исполнитель.ПутьТестовыхДанных("cf");
	Исполнитель.ДобавитьПараметр("--src", КаталогSrc);
	Исполнитель.ДобавитьПараметр("--ibcmd");

	// Когда
	Исполнитель.ВыполнитьКоманду();

	// Тогда
	Исполнитель.ОжидаемЧтоВыводСодержит("Используется ibcmd платформы");
	Исполнитель.ОжидаемЧтоВыводСодержит("Информационная база обновлена из исходников.");

КонецПроцедуры

&Тест
Процедура ТестДолжен_ОбновитьФайловуюБазуИзФайлаВыгрузкиIbcmd() Экспорт

	// Дано
	Исполнитель = Новый Тест_ИсполнительКоманд("update-dev");
	Исполнитель.УстановитьКонтекстПустаяИБ();
	ФайлDt = Исполнитель.ПутьТестовыхДанных("1Cv8.dt");
	Исполнитель.ДобавитьПараметр("--dt", ФайлDt);
	Исполнитель.ДобавитьПараметр("--ibcmd");

	// Когда
	Исполнитель.ВыполнитьКоманду();

	// Тогда
	Исполнитель.ОжидаемЧтоВыводСодержит("Используется ibcmd платформы");
	Исполнитель.ОжидаемЧтоВыводСодержит("Информационная база обновлена из файла выгрузки.");

КонецПроцедуры

&Тест
Процедура ТестДолжен_ОбновитьФайловуюБазуИнкрементальноIbcmd() Экспорт

	// Дано
	Исполнитель = Новый Тест_ИсполнительКоманд("update-dev");
	УстановитьКонтекстИнкрементальнойЗагрузки(Исполнитель);
	Исполнитель.ДобавитьПараметр("--src", "src/cf");
	Исполнитель.ДобавитьПараметр("--git-increment");
	Исполнитель.ДобавитьПараметр("--ibcmd");

	// Когда
	Исполнитель.ВыполнитьКоманду();

	// Тогда
	Исполнитель.ОжидаемЧтоВыводСодержит("Используется ibcmd платформы");
	Исполнитель.ОжидаемЧтоВыводСодержит("Будет выполнена инкрементальная загрузка");
	Исполнитель.ОжидаемЧтоВыводСодержит("ManagedApplicationModule.bsl");

	Исполнитель.ОжидаемЧтоВыводСодержит("Информационная база обновлена из исходников");
	Исполнитель.ОжидаемЧтоВыводСодержит("Обновление конфигурации БД завершено.");

КонецПроцедуры


&Тест
Процедура ТестДолжен_ОбновитьФайловуюБазуИнкрементальноIbcmdСУстановкойQuotepath() Экспорт

	// Дано
	Исполнитель = Новый Тест_ИсполнительКоманд("update-dev");
	УстановитьКонтекстИнкрементальнойЗагрузки(Исполнитель);
	Исполнитель.ДобавитьПараметр("--src", "src/cf");
	Исполнитель.ДобавитьПараметр("--git-increment");
	Исполнитель.ДобавитьПараметр("--ibcmd");

	
	Репозиторий = Новый ГитРепозиторий();
	Репозиторий.УстановитьРабочийКаталог(Исполнитель.КаталогКоманды());
	ПараметрыКоманды = Новый Массив;
	ПараметрыКоманды.Добавить("config");
	ПараметрыКоманды.Добавить("core.quotepath true");
	Репозиторий.ВыполнитьКоманду(ПараметрыКоманды);

	// Когда
	Исполнитель.ВыполнитьКоманду();

	// Тогда
	Исполнитель.ОжидаемЧтоРавно(СокрЛП(Репозиторий.ПолучитьНастройку("core.quotePath")), "false", "Должно быть задано git config core.quotePath == false");

	Исполнитель.ОжидаемЧтоВыводСодержит("Используется ibcmd платформы");
	Исполнитель.ОжидаемЧтоВыводСодержит("Будет выполнена инкрементальная загрузка");
	Исполнитель.ОжидаемЧтоВыводСодержит("ManagedApplicationModule.bsl");

	Исполнитель.ОжидаемЧтоВыводСодержит("Информационная база обновлена из исходников");
	Исполнитель.ОжидаемЧтоВыводСодержит("Обновление конфигурации БД завершено.");

КонецПроцедуры

&Тест
Процедура ТестДолжен_ОбновитьФайловуюБазуИнкрементальноСИзменениямиВВоркспейсеIbcmd() Экспорт

	// Дано
	Исполнитель = Новый Тест_ИсполнительКоманд("update-dev");
	УстановитьКонтекстИнкрементальнойЗагрузки(Исполнитель, Истина, Истина);
	Исполнитель.ДобавитьПараметр("--src", "src/cf");
	Исполнитель.ДобавитьПараметр("--git-increment");
	Исполнитель.ДобавитьПараметр("--ibcmd");

	// Когда
	Исполнитель.ВыполнитьКоманду();

	// Тогда
	Исполнитель.ОжидаемЧтоВыводСодержит("Используется ibcmd платформы");
	Исполнитель.ОжидаемЧтоВыводСодержит("Будет выполнена инкрементальная загрузка");
	Исполнитель.ОжидаемЧтоВыводСодержит("ManagedApplicationModule.bsl");
	Исполнитель.ОжидаемЧтоВыводСодержит("ObjectModule.bsl");

	Исполнитель.ОжидаемЧтоВыводСодержит("Информационная база обновлена из исходников");
	Исполнитель.ОжидаемЧтоВыводСодержит("Обновление конфигурации БД завершено.");

КонецПроцедуры

&Тест
Процедура ТестДолжен_ОбновитьФайловуюБазуИнкрементальноСИзменениямиВКонфигурацииЧерезIbcmd() Экспорт

	// Дано
	Исполнитель = Новый Тест_ИсполнительКоманд("update-dev");
	УстановитьКонтекстИнкрементальнойЗагрузки(Исполнитель, Ложь, Ложь, Истина);
	Исполнитель.ДобавитьПараметр("--src", "src/cf");
	Исполнитель.ДобавитьПараметр("--git-increment");
	Исполнитель.ДобавитьПараметр("--ibcmd");

	// Когда
	Исполнитель.ВыполнитьКоманду();

	// Тогда
	Исполнитель.ОжидаемЧтоВыводСодержит("Используется ibcmd платформы");
	Исполнитель.ОжидаемЧтоВыводСодержит("Будет выполнена инкрементальная загрузка");
	Исполнитель.ОжидаемЧтоВыводСодержит(ОбъединитьПути("Catalogs", "Справочник1.xml"));

	Исполнитель.ОжидаемЧтоВыводСодержит("Информационная база обновлена из исходников");
	Исполнитель.ОжидаемЧтоВыводСодержит("Обновление конфигурации БД завершено.");

КонецПроцедуры

&Тест
Процедура ТестДолжен_ОбновитьФайловуюБазуИнкрементальноСоВсемиВозможнымиИзменениямиIbcmd() Экспорт

	// Дано
	Исполнитель = Новый Тест_ИсполнительКоманд("update-dev");
	УстановитьКонтекстИнкрементальнойЗагрузки(Исполнитель, Истина, Истина, Истина);
	Исполнитель.ДобавитьПараметр("--src", "src/cf");
	Исполнитель.ДобавитьПараметр("--git-increment");
	Исполнитель.ДобавитьПараметр("--ibcmd");

	// Когда
	Исполнитель.ВыполнитьКоманду();

	// Тогда
	Исполнитель.ОжидаемЧтоВыводСодержит("Используется ibcmd платформы");
	Исполнитель.ОжидаемЧтоВыводСодержит("Будет выполнена инкрементальная загрузка");
	Исполнитель.ОжидаемЧтоВыводСодержит("ManagedApplicationModule.bsl");
	Исполнитель.ОжидаемЧтоВыводСодержит("ObjectModule.bsl");
	Исполнитель.ОжидаемЧтоВыводСодержит(ОбъединитьПути("Catalogs", "Справочник1.xml"));

	Исполнитель.ОжидаемЧтоВыводСодержит("Информационная база обновлена из исходников");
	Исполнитель.ОжидаемЧтоВыводСодержит("Обновление конфигурации БД завершено.");

КонецПроцедуры

&Тест
Процедура ТестДолжен_ОбновитьФайловуюБазуИнкрементальноСИзменениямиВКонфигурацииЧерезКонфигуратор() Экспорт

	// Дано
	Исполнитель = Новый Тест_ИсполнительКоманд("update-dev");
	УстановитьКонтекстИнкрементальнойЗагрузки(Исполнитель, Ложь, Ложь, Истина);
	Исполнитель.ДобавитьПараметр("--src", "src/cf");
	Исполнитель.ДобавитьПараметр("--git-increment");

	// Когда
	Исполнитель.ВыполнитьКоманду();

	// Тогда
	Исполнитель.ОжидаемЧтоВыводНеСодержит("Используется ibcmd платформы");
	Исполнитель.ОжидаемЧтоВыводСодержит("Будет выполнена инкрементальная загрузка");
	Исполнитель.ОжидаемЧтоВыводСодержит(ОбъединитьПути("Catalogs", "Справочник1.xml"));

	Исполнитель.ОжидаемЧтоВыводСодержит("Информационная база обновлена из исходников");
	Исполнитель.ОжидаемЧтоВыводСодержит("Обновление конфигурации БД завершено.");

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗапускомТеста() Экспорт

	НакопленныеВременныеФайлы = ВременныеФайлы.Файлы();

КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт

	ВременныеФайлы.УдалитьНакопленныеВременныеФайлы(НакопленныеВременныеФайлы);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьТекст(ИмяФайла, Текст)

	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла);
	ЗаписьТекста.ЗаписатьСтроку(Текст);
	ЗаписьТекста.Закрыть();

КонецПроцедуры

Процедура УстановитьКонтекстИнкрементальнойЗагрузки(Исполнитель, ИзмененияСКоммитом = Истина, ИзмененияБезКоммита = Ложь, ИзмененияВКонфигураторе = Ложь)

	КаталогПроекта = Исполнитель.КаталогКоманды();
	КаталогИсходников = ОбъединитьПути(КаталогПроекта, "src", "cf");
	КаталогSrc = Исполнитель.ПутьТестовыхДанных("cf");

	ФС.КопироватьСодержимоеКаталога(КаталогSrc, КаталогИсходников);

	Репозиторий = Новый ГитРепозиторий();
	Репозиторий.УстановитьРабочийКаталог(КаталогПроекта);
	Репозиторий.Инициализировать();

	_gitignore = ОбъединитьПути(КаталогПроекта, ".gitignore");
	ЗаписатьТекст(_gitignore, "lastUploadedCommit.txt
	|lastUploadedConfigDumpInfo.xml");

	Репозиторий.ДобавитьФайлВИндекс(".");
	Попытка
		Репозиторий.Закоммитить("first commit");
	Исключение
		// Если в репо не установленны настройки пользователя
		Репозиторий.УстановитьНастройку("user.name", "ivan ivanov", РежимУстановкиНастроекGit.Глобально);
		Репозиторий.УстановитьНастройку("user.email", "ivan@example.com", РежимУстановкиНастроекGit.Глобально);

		Репозиторий.Закоммитить("first commit");
	КонецПопытки;
	

	ПараметрыКоманды = Новый Массив;
	ПараметрыКоманды.Добавить("rev-parse");
	ПараметрыКоманды.Добавить("--short");
	ПараметрыКоманды.Добавить("HEAD");
	Репозиторий.ВыполнитьКоманду(ПараметрыКоманды);
	ПоследнийКоммит = Репозиторий.ПолучитьВыводКоманды();

	lastUploadedCommit = ОбъединитьПути(КаталогИсходников, "lastUploadedCommit.txt");
	ЗаписатьТекст(lastUploadedCommit, ПоследнийКоммит);

	Исполнитель.УстановитьКонтекстИБИзФайловКонфигурации(КаталогИсходников);
	Исполнитель.ВыгрузитьВФайлСостояниеКонфигурации(КаталогИсходников);

	Если ИзмененияСКоммитом Тогда
		ManagedApplicationModule = ОбъединитьПути(КаталогИсходников, "Ext", "ManagedApplicationModule.bsl");
		ЗаписатьТекст(ManagedApplicationModule, "Процедура ПриНачалеРаботыСистемы() КонецПроцедуры");
		Репозиторий.ДобавитьФайлВИндекс(".");
		Репозиторий.Закоммитить("second commit");
	КонецЕсли;

	Если ИзмененияБезКоммита Тогда
		ОтносительныйПутьКСправочнику = ОбъединитьПути("Catalogs", "Справочник1", "Ext", "ObjectModule.bsl");
		ObjectModule = ОбъединитьПути(КаталогИсходников, ОтносительныйПутьКСправочнику);
		ЗаписатьТекст(ObjectModule, "Процедура ПередЗаписью() КонецПроцедуры");
	КонецЕсли;

	Если ИзмененияВКонфигураторе Тогда
		lastUploadedConfigDumpInfo = ОбъединитьПути(КаталогИсходников, "lastUploadedConfigDumpInfo.xml");
		ConfigDumpInfo = ОбъединитьПути(КаталогИсходников, "ConfigDumpInfo.xml");
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент();
		ТекстовыйДокумент.Прочитать(ConfigDumpInfo, КодировкаТекста.UTF8);
		ТекстФайла = ТекстовыйДокумент.ПолучитьТекст();

		Паттерн = "<Metadata name=""Catalog\.Справочник1\.ObjectModule"" id=""(fcec4279-0ba4-4aab-b7cb-5b7a7a0eb14e[^""]*)"" configVersion=""([^""]*)""\/>";

		РегулярноеВыражение = Новый РегулярноеВыражение(Паттерн);
	
		ОткорректированныйТекст = РегулярноеВыражение.Заменить(ТекстФайла, "<Metadata name=""Catalog.Справочник1.ObjectModule"" id=""$1"" configVersion=""8481a74c381eb54692b9beea01e6eea400000000""/>");
		
		ЗаписатьТекст(lastUploadedConfigDumpInfo, ОткорректированныйТекст);
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти
