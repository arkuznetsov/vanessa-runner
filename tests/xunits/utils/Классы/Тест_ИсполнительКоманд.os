#Использовать "../../../.."
#Использовать cmdline
#Использовать ibcmdrunner
#Использовать v8runner
#Использовать asserts

#Область ОписаниеПеременных

Перем Команда; // Текущая команда приложения
Перем Аргументы; // Аргументы команды приложения
Перем СпособВывода; // Экземпляр вывода лога команды приложения
Перем КаталогКоманды; // Каталог в котором выполняется команда
Перем УправлениеИБ; // Экземпляр менеджера ibcmd
Перем УровеньЛога; // Уровень логирования

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДобавитьПараметр(ИмяПараметра, ЗначениеПараметра = Неопределено) Экспорт
	
	Аргументы.Добавить(ИмяПараметра);
	Если ЗначениеПараметра <> Неопределено Тогда
		Аргументы.Добавить(ЗначениеПараметра);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьФлаг(ИмяФлага) Экспорт
	Аргументы.Добавить(ИмяФлага);
КонецПроцедуры

Функция ВыполнитьКоманду() Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ПараметрыСистемы.ЭтоWindows = Найти(ВРег(СистемнаяИнформация.ВерсияОС), "WINDOWS") > 0;
	
	ДобавитьПараметр("--root", КаталогКоманды);
	ДобавитьФлаг("--nocacheuse");
	ДобавитьПараметр("--language", "ru");

	МенеджерКомандПриложения.РегистраторКоманд(ПараметрыСистемы);
	
	ДобавитьСпособВывода(МенеджерКомандПриложения);

	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	МенеджерКомандПриложения.ЗарегистрироватьКоманды(Парсер);
	ПараметрыКоманды = Парсер.Разобрать(Аргументы);

	Сообщить(">>>");
	Сообщить("vrunner " + СтрСоединить(Аргументы, " "));
	Попытка
		Результат = МенеджерКомандПриложения.ВыполнитьКоманду(Команда, ПараметрыКоманды.ЗначенияПараметров);	
	Исключение
		Сообщить("<<<");
		ВызватьИсключение;
	КонецПопытки;

	Сообщить("<<<");

	Возврат Результат;

КонецФункции

Функция ЛогКоманды() Экспорт
	Возврат СпособВывода;
КонецФункции

Функция КаталогКоманды() Экспорт
	Возврат КаталогКоманды;
КонецФункции

Функция ПутьТестовыхДанных(Путь1, Путь2 = Неопределено, Путь3 = Неопределено) Экспорт

	КаталогШаблонов = ОбъединитьПути(ТекущийКаталог(), "tests", "fixtures");
	Возврат ОбъединитьПути(КаталогШаблонов, Путь1, Путь2, Путь3);

КонецФункции

Процедура ОжидаемЧтоВыводСодержит(Строка) Экспорт
	Ожидаем.Что(СпособВывода.ВыводЛога()).Содержит(Строка);
КонецПроцедуры

Процедура ОжидаемЧтоВыводНеСодержит(Строка) Экспорт
	Ожидаем.Что(СпособВывода.ВыводЛога()).Не_().Содержит(Строка);
КонецПроцедуры

Процедура ОжидаемЧтоРавно(Значение1, Значение2, ПредставлениеОшибки = "") Экспорт
	Ожидаем.Что(Значение1, ПредставлениеОшибки).Равно(Значение2);
КонецПроцедуры

Процедура ОжидаемЧтоФайлСуществует(ПутьКФайлу) Экспорт

	ПолныйПуть = ОбъединитьПути(КаталогКоманды, ПутьКФайлу);
	Файл = Новый Файл(ПолныйПуть);
	ФайлСуществует =  Файл.Существует() И Файл.ЭтоФайл();
	Сообщение = СтрШаблон("Ожидали, что файл %1 существует", ПутьКФайлу);

	Ожидаем.Что(ФайлСуществует, Сообщение).ЭтоИстина();

КонецПроцедуры

Процедура УстановитьКонтекстПустаяИБ() Экспорт

	КаталогПустойИБ = ОбъединитьПути(КаталогКоманды, "db-data");

	УправлениеИБ = Новый УправлениеИБ;
	УправлениеИБ.УстановитьПараметрыАвтономногоСервера(КаталогКоманды);
	УправлениеИБ.УстановитьПараметрыФайловойИБ(КаталогПустойИБ);
	УправлениеИБ.СоздатьИБИзФайлаВыгрузки("");

	СтрокаСоединения = СтрШаблон("/F""%1""", КаталогПустойИБ);
	ДобавитьПараметр("--ibconnection", СтрокаСоединения);

КонецПроцедуры

Процедура УстановитьКонтекстИБИзФайловКонфигурации(Каталог) Экспорт

	КаталогИБ = ОбъединитьПути(КаталогКоманды, "db-data");

	УправлениеИБ = Новый УправлениеИБ;
	УправлениеИБ.УстановитьПараметрыАвтономногоСервера(КаталогКоманды);
	УправлениеИБ.УстановитьПараметрыФайловойИБ(КаталогИБ);
	УправлениеИБ.СоздатьИБИзФайловКонфигурации(Каталог);

	СтрокаСоединения = СтрШаблон("/F""%1""", КаталогИБ);
	ДобавитьПараметр("--ibconnection", СтрокаСоединения);

КонецПроцедуры

Процедура ВыгрузитьВФайлСостояниеКонфигурации(Каталог) Экспорт
	УправлениеИБ.ВыгрузитьВФайлСостояниеКонфигурации(Каталог);
КонецПроцедуры

Процедура СоздатьПустоеРасширение(ИмяРасширения, ПрефиксИмен) Экспорт
	УправлениеИБ.СоздатьРасширение(ИмяРасширения, ПрефиксИмен);
КонецПроцедуры

Процедура СоздатьРасширениеИзФайлов(ИмяРасширения, КаталогИсходников) Экспорт
	УправлениеИБ.ЗагрузитьКонфигурациюИзФайлов(КаталогИсходников, ИмяРасширения);
КонецПроцедуры

Процедура ОбновитьКонфигурациюБазыДанных(ИмяРасширения = "") Экспорт
	УправлениеИБ.ОбновитьКонфигурациюБазыДанных(ИмяРасширения);
КонецПроцедуры

Процедура УстановитьУровеньЛога(Знач Уровень) Экспорт
	УровеньЛога = Уровень;
КонецПроцедуры

Процедура СобратьВнешнююОбработку(Знач КаталогИсходников, Знач ПутьКФайлуОбработки) Экспорт

	Если ФС.ФайлСуществует(ПутьКФайлуОбработки) Тогда
		Возврат;
	КонецЕсли;

	Конфигуратор = Новый УправлениеКонфигуратором();
	КаталогВременнойИБ = ВременныеФайлы.СоздатьКаталог();
	Конфигуратор.КаталогСборки(КаталогВременнойИБ);

	Параметры = Конфигуратор.ПолучитьПараметрыЗапуска();
	Параметры.Добавить("/LoadExternalDataProcessorOrReportFromFiles");
	Параметры.Добавить(ОбщиеМетоды.ОбернутьПутьВКавычки(КаталогИсходников));
	Параметры.Добавить(ОбщиеМетоды.ОбернутьПутьВКавычки(ПутьКФайлуОбработки));

	Конфигуратор.ВыполнитьКоманду(Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриСозданииОбъекта(КомандаПриложения) 

	Команда = КомандаПриложения;
	Аргументы = Новый Массив;
	Аргументы.Добавить(Команда);

	КаталогКоманды = ВременныеФайлы.СоздатьКаталог();

	СпособВывода = Новый Тест_ВыводЛога();
	УровеньЛога = УровниЛога.Информация;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьСпособВывода(МенеджерКомандПриложения) 

	Лог = МенеджерКомандПриложения.Лог();
	
	Лог.Закрыть();
	Лог.ДобавитьСпособВывода(СпособВывода);
	Лог.УстановитьУровень(УровеньЛога);
	
КонецПроцедуры

#КонецОбласти
